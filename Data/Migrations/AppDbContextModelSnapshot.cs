// <auto-generated />
using System;
using Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.AvailableMajor", b =>
                {
                    b.Property<string>("MajorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MajorId", "MentorId");

                    b.HasIndex("MentorId");

                    b.ToTable("AvailableMajor");

                    b.HasData(
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219379")
                        },
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219382")
                        },
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219383")
                        },
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219385")
                        },
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219389")
                        },
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219392")
                        },
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219394")
                        },
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219395")
                        },
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219397")
                        },
                        new
                        {
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219400")
                        });
                });

            modelBuilder.Entity("Data.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnroll")
                        .HasColumnType("bit");

                    b.Property<string>("MajorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.HasIndex("MentorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e336"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(6510),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(6516),
                            Description = "ABC FCK",
                            Duration = "2 week",
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219379"),
                            Name = "Course 1",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "PRJ001"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e338"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(6993),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7001),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219383"),
                            Name = "Course 3",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "PRJ003"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e339"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7102),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7103),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219379"),
                            Name = "Course 4",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "PRF001"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e341"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7119),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7120),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "SE",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219383"),
                            Name = "Course 6",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "PRF003"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e344"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7132),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7133),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "SA",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219394"),
                            Name = "Course 9",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "ENG003"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e348"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7144),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7145),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "CN",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219389"),
                            Name = "Course 13",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "CNN001"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e349"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7156),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7157),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "CN",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219392"),
                            Name = "Course 14",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "CNN002"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e350"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7167),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7168),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "CN",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219400"),
                            Name = "Course 15",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "CNN003"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e351"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7179),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7180),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "SB",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219397"),
                            Name = "Course 16",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "MKT001"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e352"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7190),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7192),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "SB",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219397"),
                            Name = "Course 17",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "MKT002"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e355"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7201),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7202),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "GD",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219395"),
                            Name = "Course 20",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "GDS002"
                        },
                        new
                        {
                            Id = new Guid("1d6940a7-7035-4bc0-baa4-06174e05e356"),
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7212),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 471, DateTimeKind.Local).AddTicks(7213),
                            IsDeleted = false,
                            IsEnroll = false,
                            MajorId = "GD",
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219395"),
                            Name = "Course 21",
                            Price = 100.0,
                            Rating = 0,
                            StartDate = new DateTime(2021, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubjectId = "GDS003"
                        });
                });

            modelBuilder.Entity("Data.Entities.Major", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Major");

                    b.HasData(
                        new
                        {
                            Id = "SE",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 463, DateTimeKind.Local).AddTicks(7533),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(6407),
                            IsDeleted = false,
                            Name = "Software Engineering"
                        },
                        new
                        {
                            Id = "SB",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7447),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7453),
                            IsDeleted = false,
                            Name = "Economic"
                        },
                        new
                        {
                            Id = "SA",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7473),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7474),
                            IsDeleted = false,
                            Name = "English"
                        },
                        new
                        {
                            Id = "CN",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7530),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7532),
                            IsDeleted = false,
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = "SJ",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7535),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7536),
                            IsDeleted = false,
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = "GD",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7538),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 464, DateTimeKind.Local).AddTicks(7539),
                            IsDeleted = false,
                            Name = "Graphic Design"
                        });
                });

            modelBuilder.Entity("Data.Entities.Mentor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGraduted")
                        .HasColumnType("bit");

                    b.Property<string>("MajorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Mentor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219379"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b061"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219382"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b062"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219383"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b063"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219385"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b064"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219389"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b065"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219392"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b068"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219394"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b069"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219395"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b070"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219397"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b071"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4863-962e-a317ab219400"),
                            IsGraduted = false,
                            Rating = 0,
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b072"
                        });
                });

            modelBuilder.Entity("Data.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Data.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubjectMentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectMentorId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Data.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Data.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Data.Entities.StudentRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRegistration");
                });

            modelBuilder.Entity("Data.Entities.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            Id = "PRJ001",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(3737),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(3744),
                            IsDeleted = false,
                            Name = "Java OOP"
                        },
                        new
                        {
                            Id = "PRJ002",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4269),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4273),
                            IsDeleted = false,
                            Name = "Java Desktop"
                        },
                        new
                        {
                            Id = "PRJ003",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4298),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4299),
                            IsDeleted = false,
                            Name = "Java Web"
                        },
                        new
                        {
                            Id = "PRF001",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4301),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4302),
                            IsDeleted = false,
                            Name = "C"
                        },
                        new
                        {
                            Id = "PRF002",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4304),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4305),
                            IsDeleted = false,
                            Name = "C++"
                        },
                        new
                        {
                            Id = "PRF003",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4307),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4308),
                            IsDeleted = false,
                            Name = "C#"
                        },
                        new
                        {
                            Id = "ENG001",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4310),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4311),
                            IsDeleted = false,
                            Name = "English 1"
                        },
                        new
                        {
                            Id = "ENG002",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4313),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4314),
                            IsDeleted = false,
                            Name = "English 2"
                        },
                        new
                        {
                            Id = "ENG003",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4399),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4401),
                            IsDeleted = false,
                            Name = "English 3"
                        },
                        new
                        {
                            Id = "JPN001",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4403),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4404),
                            IsDeleted = false,
                            Name = "Japanese 1"
                        },
                        new
                        {
                            Id = "JPN002",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4406),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4407),
                            IsDeleted = false,
                            Name = "Japanese 2"
                        },
                        new
                        {
                            Id = "JPN003",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4409),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4410),
                            IsDeleted = false,
                            Name = "Japanese 3"
                        },
                        new
                        {
                            Id = "CNN001",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4412),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4413),
                            IsDeleted = false,
                            Name = "Chinese 1"
                        },
                        new
                        {
                            Id = "CNN002",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4415),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4416),
                            IsDeleted = false,
                            Name = "Chinese 2"
                        },
                        new
                        {
                            Id = "CNN003",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4418),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4419),
                            IsDeleted = false,
                            Name = "Chinese 3"
                        },
                        new
                        {
                            Id = "MKT001",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4421),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4422),
                            IsDeleted = false,
                            Name = "Marketing 1"
                        },
                        new
                        {
                            Id = "MKT002",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4424),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4425),
                            IsDeleted = false,
                            Name = "Marketing 2"
                        },
                        new
                        {
                            Id = "MKT003",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4427),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4428),
                            IsDeleted = false,
                            Name = "Marketing 3"
                        },
                        new
                        {
                            Id = "GDS001",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4430),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4431),
                            IsDeleted = false,
                            Name = "History of Graphic Design"
                        },
                        new
                        {
                            Id = "GDS002",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4433),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4434),
                            IsDeleted = false,
                            Name = "Design Basic"
                        },
                        new
                        {
                            Id = "GDS003",
                            DateCreated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4436),
                            DateUpdated = new DateTime(2021, 11, 11, 8, 42, 2, 465, DateTimeKind.Local).AddTicks(4437),
                            IsDeleted = false,
                            Name = "Design Advance"
                        });
                });

            modelBuilder.Entity("Data.Entities.SubjectMajor", b =>
                {
                    b.Property<string>("MajorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MajorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectMajor");

                    b.HasData(
                        new
                        {
                            MajorId = "SE",
                            SubjectId = "PRJ001"
                        },
                        new
                        {
                            MajorId = "SE",
                            SubjectId = "PRJ002"
                        },
                        new
                        {
                            MajorId = "SE",
                            SubjectId = "PRJ003"
                        },
                        new
                        {
                            MajorId = "SE",
                            SubjectId = "PRF001"
                        },
                        new
                        {
                            MajorId = "SE",
                            SubjectId = "PRF002"
                        },
                        new
                        {
                            MajorId = "SE",
                            SubjectId = "PRF003"
                        },
                        new
                        {
                            MajorId = "SA",
                            SubjectId = "ENG001"
                        },
                        new
                        {
                            MajorId = "SA",
                            SubjectId = "ENG002"
                        },
                        new
                        {
                            MajorId = "SA",
                            SubjectId = "ENG003"
                        },
                        new
                        {
                            MajorId = "SJ",
                            SubjectId = "JPN001"
                        },
                        new
                        {
                            MajorId = "SJ",
                            SubjectId = "JPN002"
                        },
                        new
                        {
                            MajorId = "SJ",
                            SubjectId = "JPN003"
                        },
                        new
                        {
                            MajorId = "CN",
                            SubjectId = "CNN001"
                        },
                        new
                        {
                            MajorId = "CN",
                            SubjectId = "CNN002"
                        },
                        new
                        {
                            MajorId = "CN",
                            SubjectId = "CNN003"
                        },
                        new
                        {
                            MajorId = "SB",
                            SubjectId = "MKT001"
                        },
                        new
                        {
                            MajorId = "SB",
                            SubjectId = "MKT002"
                        },
                        new
                        {
                            MajorId = "SB",
                            SubjectId = "MKT003"
                        },
                        new
                        {
                            MajorId = "GD",
                            SubjectId = "GDS001"
                        },
                        new
                        {
                            MajorId = "GD",
                            SubjectId = "GDS002"
                        },
                        new
                        {
                            MajorId = "GD",
                            SubjectId = "GDS003"
                        });
                });

            modelBuilder.Entity("Data.Entities.SubjectMentor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectMentors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4800-962e-a317ab219379"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219379"),
                            Name = "Java OOP",
                            SubjectId = "PRJ001"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4803-962e-a317ab219382"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219382"),
                            Name = "English 2",
                            SubjectId = "PRJ003"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4804-962e-a317ab219383"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219383"),
                            Name = "Java Web",
                            SubjectId = "PRJ003"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4806-962e-a317ab219385"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219385"),
                            Name = "Java OOP",
                            SubjectId = "PRJ001"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4810-962e-a317ab219389"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219389"),
                            Name = "Chinese 1",
                            SubjectId = "PRJ003"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4813-962e-a317ab219392"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219392"),
                            Name = "Chinese 2",
                            SubjectId = "PRJ003"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4815-962e-a317ab219394"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219394"),
                            Name = "English 2",
                            SubjectId = "PRJ003"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4816-962e-a317ab219395"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219395"),
                            Name = "Design Basic",
                            SubjectId = "PRJ003"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4818-962e-a317ab219397"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219397"),
                            Name = "English 1",
                            SubjectId = "PRJ003"
                        },
                        new
                        {
                            Id = new Guid("3f0c7479-25cd-4821-962e-a317ab219400"),
                            MentorId = new Guid("3f0c7479-25cd-4863-962e-a317ab219400"),
                            Name = "Marketing 2",
                            SubjectId = "PRJ003"
                        });
                });

            modelBuilder.Entity("Data.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Withdraw")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabledMentor")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MajorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b061",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3c14db28-6aa9-4d3d-b9fd-81acd51370da",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp1",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8dbab0d8-9cf5-43fb-a57d-0a91793d59ed",
                            TwoFactorEnabled = false,
                            UserName = "emp1"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b062",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "00ddac40-3387-4602-9e27-c50a97a7b950",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp2",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37000380-6bdc-4de2-b794-8dc5ee4122f6",
                            TwoFactorEnabled = false,
                            UserName = "emp2"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b063",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "22791c8e-059f-4b91-9330-7a89c7a28f31",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp3",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp3",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c625751-d217-49a4-b2a2-083065876a37",
                            TwoFactorEnabled = false,
                            UserName = "emp3"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b064",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "61b2b797-efe1-4613-9b7c-c9e365fecfb3",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp4",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp4",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "123ea644-ce68-49a0-a390-584b8ac532a2",
                            TwoFactorEnabled = false,
                            UserName = "emp4"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b065",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "13b5f03b-483c-4398-addc-45921dedb4d9",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp5",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp5",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39cdf8c9-c82f-4dc2-9ece-b3e6294f742f",
                            TwoFactorEnabled = false,
                            UserName = "emp5"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b066",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7dbff86f-c7c6-4f33-99d4-23b2f10a506e",
                            EmailConfirmed = false,
                            Fullname = "Mr. Loc",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "loc",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1184b801-4393-4d97-8d66-dca12f7e5d9b",
                            TwoFactorEnabled = false,
                            UserName = "loc"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b067",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "97658a91-4d66-4bf6-92a0-707b4698e239",
                            EmailConfirmed = false,
                            Fullname = "Mr. Tam",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "tam",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41196733-a2f7-47de-b42f-e40f209ffbc9",
                            TwoFactorEnabled = false,
                            UserName = "tam"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b068",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4b125b17-8661-41af-99bd-dfbec5c8245e",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp6",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp6",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e406b8a6-7daf-401c-9c62-0c4f776428fa",
                            TwoFactorEnabled = false,
                            UserName = "emp6"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b069",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b7e62d59-4f9b-45a9-9c0e-b1918e8c690c",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp7",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp7",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5112537b-485a-4284-ba5d-21021008c9c1",
                            TwoFactorEnabled = false,
                            UserName = "emp7"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b070",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5fbe88f1-e1f0-4855-be3c-ba61416f93b0",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp8",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp8",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a0d4c1a-edfa-4f39-ae25-0d0330cfa2bd",
                            TwoFactorEnabled = false,
                            UserName = "emp8"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b071",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c3a41167-d66b-4ae3-ab2b-0b406230d5ac",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp9",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp9",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27d853b1-372e-42e8-bd68-c730cfc043fa",
                            TwoFactorEnabled = false,
                            UserName = "emp9"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b072",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fa65f83b-9cd4-434a-b12c-c17b0681ac96",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp10",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp10",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e58abf2-8681-4886-ba3c-8292188d28a5",
                            TwoFactorEnabled = false,
                            UserName = "emp10"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b073",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9439ba8c-494f-466f-ab57-316a46af4321",
                            EmailConfirmed = false,
                            Fullname = "Mr. Loc1",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "loc1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3406bc7-12e4-4e48-9de9-2e976724344c",
                            TwoFactorEnabled = false,
                            UserName = "loc1"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b074",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "03dd0078-2e38-423c-bc37-4b517c6705c1",
                            EmailConfirmed = false,
                            Fullname = "Mr. Tam1",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "tam1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6b9b776-aa0f-4d0d-9206-d523c55e2729",
                            TwoFactorEnabled = false,
                            UserName = "tam1"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b075",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "308792a0-4f8a-4140-a54b-0136befda063",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp11",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp11",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cdcfd6f-712d-4d3e-a414-4b535aa5bed2",
                            TwoFactorEnabled = false,
                            UserName = "emp11"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b076",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e7b5f162-92b1-4dca-be74-c4d17210d30c",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp12",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp12",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d82bf97e-57b4-4277-ad4a-fdd158690c75",
                            TwoFactorEnabled = false,
                            UserName = "emp12"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b077",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "28a3a2fc-6add-4b1e-bd2f-6bf9ae1ca212",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp13",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp13",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b843b061-2e46-4456-ad97-66f3c1e17d03",
                            TwoFactorEnabled = false,
                            UserName = "emp13"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b078",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "11c98a5f-0c4e-43a8-ae7b-7d79bb5b2cb0",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp14",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp14",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "792ce431-1858-4f65-bf64-e1158d1125d4",
                            TwoFactorEnabled = false,
                            UserName = "emp14"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b079",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "61c5903f-b26a-44f3-946d-2823e1535249",
                            EmailConfirmed = false,
                            Fullname = "Mr. Emp15",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "emp15",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2511e3d2-d9a8-4257-bc43-db2d70994d8d",
                            TwoFactorEnabled = false,
                            UserName = "emp15"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b080",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "842463db-0020-4bbd-bbcb-2e3adfdb7680",
                            EmailConfirmed = false,
                            Fullname = "Mr. Loc2",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "loc2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e8a17c8-93ce-408a-97fd-9a533d716b5c",
                            TwoFactorEnabled = false,
                            UserName = "loc2"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b081",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "bd6fc6ca-0d57-461b-b419-ab3baf8f801e",
                            EmailConfirmed = false,
                            Fullname = "Mr. Tam2",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "tam2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a90a879a-5e58-4576-ab3d-3dec0e751326",
                            TwoFactorEnabled = false,
                            UserName = "tam2"
                        },
                        new
                        {
                            Id = "3c5ec754-01b1-49cf-94e0-09250222b060",
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "16b3f929-8658-49a3-9293-fdc3e2a9ef0a",
                            EmailConfirmed = false,
                            Fullname = "Admin Ne`",
                            IsDisable = false,
                            IsEnabledMentor = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEHaMifmenPio6tOMmkItEGJouVwE0OIMNql432J1dNSZDG10etUQfLlGiCvdmbA1Nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4358bd0b-ce35-48d4-b754-c13dd91661d1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "ADMIN",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "MENTOR",
                            ConcurrencyStamp = "MENTOR",
                            Name = "MENTOR",
                            NormalizedName = "MENTOR"
                        },
                        new
                        {
                            Id = "STUDENT",
                            ConcurrencyStamp = "STUDENT",
                            Name = "STUDENT",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b060",
                            RoleId = "ADMIN"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b061",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b062",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b063",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b064",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b065",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b066",
                            RoleId = "STUDENT"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b067",
                            RoleId = "STUDENT"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b068",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b069",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b070",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b071",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b072",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b073",
                            RoleId = "STUDENT"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b074",
                            RoleId = "STUDENT"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b075",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b076",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b077",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b078",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b079",
                            RoleId = "MENTOR"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b080",
                            RoleId = "STUDENT"
                        },
                        new
                        {
                            UserId = "3c5ec754-01b1-49cf-94e0-09250222b081",
                            RoleId = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.Entities.AvailableMajor", b =>
                {
                    b.HasOne("Data.Entities.Major", "Major")
                        .WithMany("AvailableMajors")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Mentor", "Mentor")
                        .WithMany("AvailableMajors")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Course", b =>
                {
                    b.HasOne("Data.Entities.Major", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId");

                    b.HasOne("Data.Entities.Mentor", "Mentor")
                        .WithMany("Courses")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Data.Entities.Mentor", b =>
                {
                    b.HasOne("Data.Entities.Major", null)
                        .WithMany("Mentors")
                        .HasForeignKey("MajorId");

                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("Data.Entities.Mentor", "UserId");
                });

            modelBuilder.Entity("Data.Entities.Question", b =>
                {
                    b.HasOne("Data.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Resource", b =>
                {
                    b.HasOne("Data.Entities.SubjectMentor", "SubjectMentor")
                        .WithMany("Resources")
                        .HasForeignKey("SubjectMentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Section", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Student", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Data.Entities.StudentRegistration", b =>
                {
                    b.HasOne("Data.Entities.Course", "Course")
                        .WithMany("StudentRegistrations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Student", "Student")
                        .WithMany("StudentRegistrations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.SubjectMajor", b =>
                {
                    b.HasOne("Data.Entities.Major", "Major")
                        .WithMany("SubjectMajors")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.SubjectMentor", b =>
                {
                    b.HasOne("Data.Entities.Mentor", "Mentor")
                        .WithMany("SubjectMentors")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Subject", "Subject")
                        .WithMany("SubjectMentors")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Data.Entities.Transaction", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Data.Entities.Major", "Major")
                        .WithMany("Users")
                        .HasForeignKey("MajorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
